{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Schema for the commit-format configuration file",
  "type": "object",
  "$defs": {
    "variableDefs": {
      "description": "The template variables definitions namespace",
      "$defs": {
        "propertiesDefs": {
          "description": "The template variables properties definitions namespace",
          "$defs": {
            "id": {
              "type": "string",
              "description": "The globally unique id of the variable",
              "pattern": "^#[a-zA-Z0-9-_]+$"
            },
            "name": {
              "type": "string",
              "description": "The local name of the variable",
              "pattern": "^[a-zA-Z0-9-_]+$"
            },
            "path": {
              "type": "string",
              "description": "The path of the value of the variable in the template",
              "pattern": "^([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9-_]+$"
            },
            "type": {
              "type": "string",
              "description": "The type of the variable"
            },
            "description": {
              "type": "string",
              "description": "The description of the variable"
            },
            "prompt": {
              "type": "string",
              "description": "The prompt to use for the variable in interactive mode"
            },
            "value": {
              "description": "The value of the variable"
            },
            "includeOn": {
              "type": "array",
              "description": "The conditions to check if the variable should be included in the template",
              "items": {
                "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/oneOfAllConditions"
              },
              "minItems": 1
            },
            "hints": {
              "type": "array",
              "description": "The hints to use for the variable",
              "items": {
                "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/oneOfAllHints"
              },
              "minItems": 1
            }
          }
        },
        "includeConditionDefs": {
          "description": "The include condition definitions namespace",
          "$defs": {
            "propertiesDefs": {
              "description": "The include condition properties definitions namespace",
              "$defs": {
                "id": {
                  "type": "string",
                  "description": "The unique in array id of the include condition",
                  "pattern": "^#[a-zA-Z0-9-_]+$"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the include condition"
                },
                "path": {
                  "type": "string",
                  "description": "The path of the value to check in the condition",
                  "pattern": "^([a-zA-Z0-9-_]+\\.)*[a-zA-Z0-9-_]+$"
                }
              }
            },
            "conditionWithBaseProperties": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "id": {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/propertiesDefs/$defs/id"
                },
                "type": {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/propertiesDefs/$defs/type"
                }
              }
            },
            "conditionWithVariableToCheck": {
              "type": "object",
              "required": [
                "path"
              ],
              "properties": {
                "path": {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/propertiesDefs/$defs/path"
                }
              }
            },
            "oneOfAllConditions": {
              "oneOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/existCondition"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/notExistCondition"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/trueCondition"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/falseCondition"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/valueCondition"
                }
              ]
            },
            "existCondition": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithBaseProperties"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithVariableToCheck"
                }
              ],
              "description": "The exist condition object",
              "properties": {
                "type": {
                  "const": "exist"
                }
              }
            },
            "notExistCondition": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithBaseProperties"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithVariableToCheck"
                }
              ],
              "description": "The not exist condition object",
              "properties": {
                "type": {
                  "const": "not-exist"
                }
              }
            },
            "trueCondition": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithBaseProperties"
                }
              ],
              "description": "The always true condition object",
              "properties": {
                "type": {
                  "const": "true"
                }
              }
            },
            "falseCondition": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithBaseProperties"
                }
              ],
              "description": "The always false condition object",
              "properties": {
                "type": {
                  "const": "false"
                }
              }
            },
            "valueCondition": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithBaseProperties"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/includeConditionDefs/$defs/conditionWithVariableToCheck"
                }
              ],
              "description": "The value condition object (check if the value is in the values array)",
              "properties": {
                "type": {
                  "const": "value"
                },
                "values": {
                  "description": "The values array to check if the value is in",
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "number"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "object"
                      },
                      {
                        "type": "array"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "hintDefs": {
          "description": "The template variables hints definitions namespace",
          "$defs": {
            "propertiesDefs": {
              "description": "The template variables hints properties definitions namespace",
              "$defs": {
                "id": {
                  "type": "string",
                  "description": "The globally unique id of the hint",
                  "pattern": "^#[a-zA-Z0-9-_]+$"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the hint"
                }
              }
            },
            "hintWithBaseProperties": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "id": {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/propertiesDefs/$defs/id"
                },
                "type": {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/propertiesDefs/$defs/type"
                }
              }
            },
            "hintReference": {
              "type": "string",
              "enum": [
                "required",
                "unique"
              ]
            },
            "oneOfAllHints": {
              "oneOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintReference"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/requiredHint"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/uniqueHint"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/minHint"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/maxHint"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/roundHint"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/stepHint"
                }
              ]
            },
            "minHint": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintWithBaseProperties"
                }
              ],
              "description": "The min hint object",
              "properties": {
                "type": {
                  "const": "min"
                },
                "value": {
                  "type": "number",
                  "description": "The minimum for the variable have different behavior based on the type of the variable"
                },
                "exclusive": {
                  "type": "boolean",
                  "description": "Whether the minimum value is exclusive or not"
                }
              }
            },
            "maxHint": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintWithBaseProperties"
                }
              ],
              "description": "The max hint object",
              "properties": {
                "type": {
                  "const": "max"
                },
                "value": {
                  "type": "number",
                  "description": "The maximum for the variable have different behavior based on the type of the variable"
                },
                "exclusive": {
                  "type": "boolean",
                  "description": "Whether the minimum value is exclusive or not"
                }
              }
            },
            "roundHint": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintWithBaseProperties"
                }
              ],
              "description": "The round hint object",
              "properties": {
                "type": {
                  "const": "round"
                },
                "value": {
                  "type": "integer",
                  "description": "The number of decimal places to round the value to",
                  "minimum": 0
                }
              }
            },
            "stepHint": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintWithBaseProperties"
                }
              ],
              "description": "The step hint object",
              "properties": {
                "type": {
                  "const": "step"
                },
                "value": {
                  "type": "number",
                  "description": "The step for the number or integer variable (for integer variable the step is rounded to the nearest integer)"
                }
              }
            },
            "requiredHint": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintWithBaseProperties"
                }
              ],
              "description": "The required hint object",
              "properties": {
                "type": {
                  "const": "required"
                }
              }
            },
            "uniqueHint": {
              "allOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/hintDefs/$defs/hintWithBaseProperties"
                }
              ],
              "description": "The unique hint object",
              "properties": {
                "type": {
                  "const": "unique"
                }
              }
            }
          }
        },
        "variableWithBasicProperties": {
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "id": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/id"
            },
            "name": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/name"
            },
            "type": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/type"
            },
            "description": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/description"
            },
            "includeOn": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/includeOn"
            },
            "hints": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/hints"
            }
          }
        },
        "variableWithInputProperties": {
          "type": "object",
          "properties": {
            "prompt": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/prompt"
            },
            "path": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/path"
            },
            "value": {
              "$ref": "#/$defs/variableDefs/$defs/propertiesDefs/$defs/value"
            }
          }
        },
        "oneOfAllVariables": {
          "oneOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/stringVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/booleanVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/numberVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/integerVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/listVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/arrayVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/selectVariable"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/multiselectVariable"
            }
          ]
        },
        "selectAllowedVariables": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/oneOfAllVariables"
            },
            {
              "not": {
                "$ref": "#/$defs/variableDefs/$defs/booleanVariable"
              }
            }
          ]
        },
        "selectEnumItems": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": false,
              "required": [
                "label",
                "value"
              ],
              "properties": {
                "label": {
                  "type": "string",
                  "description": "The label of the enum value"
                },
                "value": {
                  "description": "The value of the enum value",
                  "oneOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "object"
                    },
                    {
                      "type": "array"
                    }
                  ]
                }
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "stringVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The string variable object",
          "properties": {
            "type": {
              "const": "string"
            },
            "value": {
              "type": "string"
            },
            "default": {
              "type": "string",
              "description": "The default value of the variable"
            },
            "optional": {
              "type": "boolean",
              "description": "Whether the variable is optional or not"
            }
          }
        },
        "booleanVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The boolean variable object",
          "properties": {
            "type": {
              "const": "boolean"
            },
            "value": {
              "type": "boolean"
            },
            "initial": {
              "type": "boolean",
              "description": "The initial value of the variable"
            }
          }
        },
        "numberVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The numeric variable object",
          "properties": {
            "type": {
              "const": "number"
            },
            "value": {
              "type": "number"
            },
            "initial": {
              "type": "number",
              "description": "The initial value of the variable"
            }
          }
        },
        "integerVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The integer variable object",
          "properties": {
            "type": {
              "const": "integer"
            },
            "value": {
              "type": "integer"
            },
            "initial": {
              "type": "integer",
              "description": "The initial value of the variable"
            }
          }
        },
        "listVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The list variable object",
          "properties": {
            "type": {
              "const": "list"
            },
            "items": {
              "description": "The items of the array",
              "oneOf": [
                {
                  "$ref": "#/$defs/variableDefs/$defs/stringVariable"
                },
                {
                  "$ref": "#/$defs/variableDefs/$defs/booleanVariable"
                }
              ]
            },
            "value": {
              "type": "array"
            },
            "separator": {
              "type": "string",
              "description": "The separator to use for the array items in interactive mode"
            }
          },
          "required": [
            "items"
          ]
        },
        "arrayVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The array variable object",
          "properties": {
            "type": {
              "const": "array"
            },
            "items": {
              "description": "The items of the array",
              "$ref": "#/$defs/variableDefs/$defs/oneOfAllVariables"
            },
            "value": {
              "type": "array"
            },
            "continuePrompt": {
              "type": "string",
              "description": "The prompt to use to ask is user want to continue adding items to the array"
            }
          },
          "required": [
            "items"
          ]
        },
        "selectVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The select variable object",
          "properties": {
            "type": {
              "const": "select"
            },
            "items": {
              "description": "The items of the array",
              "$ref": "#/$defs/variableDefs/$defs/selectAllowedVariables"
            },
            "value": {
              "description": "The value of the variable",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "integer"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array"
                }
              ]
            },
            "enum": {
              "type": "array",
              "description": "The enum values of the variable",
              "items": {
                "$ref": "#/$defs/variableDefs/$defs/selectEnumItems"
              }
            },
            "disabled": {
              "type": "array",
              "description": "The disabled values of the variable",
              "items": {
                "description": "The value of label from enum",
                "type": "string"
              }
            },
            "initial": {
              "type": "string",
              "description": "The label of initial value of the variable"
            }
          },
          "required": [
            "items",
            "enum"
          ]
        },
        "multiselectVariable": {
          "allOf": [
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithBasicProperties"
            },
            {
              "$ref": "#/$defs/variableDefs/$defs/variableWithInputProperties"
            }
          ],
          "description": "The multiselect variable object",
          "properties": {
            "type": {
              "const": "multiselect"
            },
            "items": {
              "description": "The items of the array",
              "$ref": "#/$defs/variableDefs/$defs/selectAllowedVariables"
            },
            "value": {
              "type": "array",
              "description": "The value of the variable",
              "items": {
                "description": "The value of the variable",
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "number"
                  },
                  {
                    "type": "integer"
                  },
                  {
                    "type": "object"
                  },
                  {
                    "type": "array"
                  }
                ]
              }
            },
            "enum": {
              "type": "array",
              "description": "The enum values of the variable",
              "items": {
                "$ref": "#/$defs/variableDefs/$defs/selectEnumItems"
              }
            },
            "selected": {
              "type": "array",
              "description": "The selected values of the variable",
              "items": {
                "description": "The value of label from enum",
                "type": "string"
              }
            },
            "disabled": {
              "type": "array",
              "description": "The disabled values of the variable",
              "items": {
                "description": "The value of label from enum",
                "type": "string"
              }
            }
          },
          "required": [
            "items",
            "enum"
          ]
        }
      }
    },
    "format": {
      "type": "object",
      "description": "A format object",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the format (can include folder path as `commits/feat`)",
          "pattern": "^([a-zA-Z0-9-_]+\/)*[a-zA-Z0-9-_]+$"
        },
        "aliases": {
          "type": "array",
          "description": "The aliases of the format",
          "items": {
            "type": "string",
            "description": "The alias of the format (can include folder path as `commits/feat`)",
            "pattern": "([a-zA-Z0-9-_]+\/)*[a-zA-Z0-9-_]+$"
          }
        },
        "description": {
          "type": "string",
          "description": "The description of the format"
        },
        "variables": {
          "type": "array",
          "description": "The variables to use for the template",
          "items": {
            "$ref": "#/$defs/variableDefs/$defs/oneOfAllVariables"
          }
        },
        "template": {
          "type": "object",
          "description": "The template for the format",
          "additionalProperties": false,
          "properties": {
            "mode": {
              "type": "string",
              "description": "The mode of the render",
              "const": "string-literal"
            },
            "string": {
              "type": "string",
              "description": "The string to use for the render"
            },
            "knownArgs": {
              "type": "array",
              "description": "The known arguments to use for the render function even if they don't have a value",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "required": [
        "name"
      ]
    }
  },
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string"
    },
    "version": {
      "type": "string",
      "description": "The version of the configuration file schema",
      "pattern": "^0\\.2\\.0$"
    },
    "formats": {
      "type": "array",
      "description": "The formats array to use for the commit message",
      "items": {
        "$ref": "#/$defs/format"
      }
    }
  },
  "required": [
    "version",
    "formats"
  ]
}